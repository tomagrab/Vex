@page "/Tickets/Create"
@attribute [Authorize(Roles = "Admin, Manager, User")]
@rendermode InteractiveServer

<PageTitle>Create Ticket | Vex</PageTitle>

<Div>
    <Form @onsubmit="OnSaveClicked">
        <Validations
            @ref="ValidationsRef"
            Mode="ValidationMode.Auto"
            Model="@ticketModel"
            ValidateOnLoad="false"
        >
            <Fields>
                <Grid class="flex-1">
                    <Column ColumnSize="ColumnSize.IsThird">
                        <Validation Validator="ValidationRule.IsNotEmpty">
                            <Field>
                                <FieldBody class="flex flex-col">
                                    <Addons>
                                        <Addon AddonType="AddonType.Start">
                                            <Tooltip Text="The name of the caller">
                                                <AddonLabel>Contact</AddonLabel>
                                            </Tooltip>
                                        </Addon>
                                        <Addon AddonType="AddonType.Body">
                                            <TextEdit @bind-Text="ticketModel.Contact" />
                                        </Addon>
                                    </Addons>
                                    <Feedback>
                                        <ValidationSuccess>Contact is valid</ValidationSuccess>
                                        <ValidationError>Contact cannot be empty</ValidationError>
                                    </Feedback>
                                </FieldBody>
                            </Field>
                        </Validation>
                        <Validation Validator="ValidationRule.IsNotEmpty">
                            <Field>
                                <FieldBody class="flex flex-col">
                                    <Addons>
                                        <Addon AddonType="AddonType.Start">
                                            <Tooltip Text="The phone number of the caller">
                                                <AddonLabel>Phone</AddonLabel>
                                            </Tooltip>
                                        </Addon>
                                        <Addon AddonType="AddonType.Body">
                                            <InputMask @bind-Text="ticketModel.Phone" Mask="(999) 999-9999" />
                                        </Addon>
                                    </Addons>
                                    <Feedback>
                                        <ValidationSuccess>Phone is valid</ValidationSuccess>
                                        <ValidationError>Phone cannot be empty</ValidationError>
                                    </Feedback>
                                </FieldBody>
                            </Field>
                        </Validation>
                        <Validation Validator="ValidateEmail">
                            <Field>
                                <FieldBody class="flex flex-col">
                                    <Addons>
                                        <Addon AddonType="AddonType.Start">
                                            <Tooltip Text="The email address of the caller">
                                                <AddonLabel>Email</AddonLabel>
                                            </Tooltip>
                                        </Addon>
                                        <Addon AddonType="AddonType.Body">
                                            <InputMask
                                                @bind-Text="ticketModel.Email"
                                                Alias="email"
                                            />
                                        </Addon>
                                    </Addons>
                                    <Feedback>
                                        <ValidationSuccess>Email is valid</ValidationSuccess>
                                        <ValidationError>Must be a valid email address</ValidationError>
                                    </Feedback>
                                </FieldBody>
                            </Field>
                        </Validation>
                    </Column>
                    <Column ColumnSize="ColumnSize.IsThird">
                        <Validation Validator="ValidateCompany">
                            <Field>
                                <FieldBody class="flex flex-col">
                                    <Addons>
                                        <Addon AddonType="AddonType.Start">
                                            <Tooltip Text="The company of the caller">
                                                <AddonLabel>Company</AddonLabel>
                                            </Tooltip>
                                        </Addon>
                                        <Addon AddonType="AddonType.Body">
                                                <Autocomplete
                                                    TItem="CompanyModel"
                                                    TValue="CompanyModel"
                                                    Data="@ReadDataCompanies"
                                                    ReadData="@OnHandleReadDataCompanies"
                                                    TextField="@((company) => company.Name)"
                                                    ValueField="@((company) => company)"
                                                    SelectedValue="@selectedCompany"
                                                    SelectedValueChanged="@OnHandleCompanyChanged"
                                                    HighlightSearch
                                                    FreeTyping
                                                    AutoSelectFirstItem="true"
                                                >
                                                    <NotFoundContent>Sorry... @context was not found! :(</NotFoundContent>
                                                </Autocomplete>
                                        </Addon>
                                    </Addons>
                                    <Feedback>
                                        <ValidationSuccess>Company is valid</ValidationSuccess>
                                        <ValidationError>Company cannot be empty</ValidationError>
                                    </Feedback>
                                </FieldBody>
                            </Field>
                        </Validation>
                        @* Only show branch autocomplete if Companies have been populated and set *@
                        @if (selectedCompany != null && selectedCompany.Id != Guid.Empty && selectedCompany.Name != String.Empty)
                        {
                            <Validation Validator="ValidateBranch">
                                <Field>
                                    <FieldBody class="flex flex-col">
                                        <Addons>
                                            <Addon AddonType="AddonType.Start">
                                                <Tooltip Text="The branch of the caller">
                                                    <AddonLabel>Branch</AddonLabel>
                                                </Tooltip>
                                            </Addon>
                                            <Addon AddonType="AddonType.Body">
                                                <Autocomplete
                                                        TItem="BranchModel"
                                                        TValue="BranchModel"
                                                        Data="@ReadDataBranches"
                                                        ReadData="@OnHandleReadDataBranches"
                                                        TextField="@((branch) => branch.Name)"
                                                        ValueField="@((branch) => branch)"
                                                        SelectedValue="@selectedBranch"
                                                        SelectedValueChanged="@OnHandleBranchChanged"
                                                        HighlightSearch
                                                        FreeTyping
                                                    >
                                                        <NotFoundContent>Sorry... @context was not found! :(</NotFoundContent>
                                                    </Autocomplete>
                                            </Addon>
                                        </Addons>
                                    </FieldBody>
                                    <Feedback>
                                        <ValidationSuccess>Branch is valid</ValidationSuccess>
                                        <ValidationError>Branch cannot be empty</ValidationError>
                                    </Feedback>
                                </Field>
                            </Validation>
                        }
                    </Column>
                    <Column ColumnSize="ColumnSize.IsThird">
                        <Validation Validator="ValidateCategory">
                            <Field>
                                <FieldBody class="flex flex-col">
                                    <Addons>
                                        <Addon AddonType="AddonType.Start">
                                            <Tooltip Text="The category of the ticket">
                                                <AddonLabel>Category</AddonLabel>
                                            </Tooltip>
                                        </Addon>
                                        <Addon AddonType="AddonType.Body">
                                            <Select
                                                TValue="Guid"
                                                SelectedValue="@selectedCategoryId"
                                                SelectedValueChanged="@OnCategoryChanged"
                                            >
                                                @foreach (var category in categories)
                                                {
                                                    <SelectItem
                                                        TValue="Guid"
                                                        Value="@category.Id"
                                                    >
                                                        @category.Name
                                                    </SelectItem>
                                                }
                                            </Select>
                                        </Addon>
                                    </Addons>
                                    <Feedback>
                                        <ValidationSuccess>Category is valid</ValidationSuccess>
                                        <ValidationError>Category cannot be empty</ValidationError>
                                    </Feedback>
                                </FieldBody>
                            </Field>
                        </Validation>
                        <Validation Validator="ValidateSubCategory">
                            <Field>
                                <FieldBody class="flex flex-col">
                                    <Addons>
                                        <Addon AddonType="AddonType.Start">
                                            <Tooltip Text="The subcategory of the ticket">
                                                <AddonLabel>SubCategory</AddonLabel>
                                            </Tooltip>
                                        </Addon>
                                        <Addon AddonType="AddonType.Body">
                                            <Select
                                                TValue="SubCategoryModel"
                                                @bind-SelectedValue="@ticketModel.SubCategory"
                                            >
                                                @foreach (var subCategory in subCategories)
                                                {
                                                    <SelectItem
                                                        TValue="SubCategoryModel"
                                                        Value="@subCategory"
                                                    >
                                                        @subCategory.Name
                                                    </SelectItem>
                                                }
                                            </Select>
                                        </Addon>
                                    </Addons>
                                    <Feedback>
                                        <ValidationSuccess>SubCategory is valid</ValidationSuccess>
                                        <ValidationError>SubCategory cannot be empty</ValidationError>
                                    </Feedback>
                                </FieldBody>
                            </Field>
                        </Validation>
                    </Column>
                    <Column ColumnSize="ColumnSize.IsThird">
                        <Validation Validator="ValidateStatus">
                            <Field>
                                <FieldBody class="flex flex-col">
                                    <Addons>
                                        <Addon AddonType="AddonType.Start">
                                            <Tooltip Text="The status of the ticket">
                                                <AddonLabel>Status</AddonLabel>
                                            </Tooltip>
                                        </Addon>
                                        <Addon AddonType="AddonType.Body">
                                            <Select
                                                TValue="StatusModel"
                                                @bind-SelectedValue="@ticketModel.Status"
                                            >
                                                @foreach (var status in statuses)
                                                {
                                                    <SelectItem
                                                        TValue="StatusModel"
                                                        Value="@status"
                                                    >
                                                        @status.Name
                                                    </SelectItem>
                                                }
                                            </Select>
                                        </Addon>
                                    </Addons>
                                    <Feedback>
                                        <ValidationSuccess>Status is valid</ValidationSuccess>
                                        <ValidationError>Status cannot be empty</ValidationError>
                                    </Feedback>
                                </FieldBody>
                            </Field>
                        </Validation>
                        <Validation Validator="ValidatePriority">
                            <Field>
                                <FieldBody class="flex flex-col">
                                    <Addons>
                                        <Addon AddonType="AddonType.Start">
                                            <Tooltip Text="The priority of the ticket">
                                                <AddonLabel>Priority</AddonLabel>
                                            </Tooltip>
                                        </Addon>
                                        <Addon AddonType="AddonType.Body">
                                            <Select
                                                TValue="PriorityModel"
                                                @bind-SelectedValue="@ticketModel.Priority"
                                            >
                                                @foreach (var priority in priorities)
                                                {
                                                    <SelectItem
                                                        TValue="PriorityModel"
                                                        Value="@priority"
                                                    >
                                                        @priority.Name
                                                    </SelectItem>
                                                }
                                            </Select>
                                        </Addon>
                                    </Addons>
                                    <Feedback>
                                        <ValidationSuccess>Priority is valid</ValidationSuccess>
                                        <ValidationError>Priority cannot be empty</ValidationError>
                                    </Feedback>
                                </FieldBody>
                            </Field>
                        </Validation>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is8">
                        <Validation Validator="ValidateAssignedTo">
                            <Field>
                                <FieldBody class="flex flex-col">
                                    <Addons>
                                        <Addon AddonType="AddonType.Start">
                                            <Tooltip Text="The person assigned to this ticket">
                                                <AddonLabel>Assigned To</AddonLabel>
                                            </Tooltip>
                                        </Addon>
                                        <Addon AddonType="AddonType.Body">
                                            <Select
                                                TValue="UserModel"
                                                @bind-SelectedValue="@ticketModel.AssignedTo"
                                            >
                                                @foreach (var user in users)
                                                {
                                                    <SelectItem
                                                        TValue="UserModel"
                                                        Value="@user"
                                                    >
                                                        @user.Name
                                                    </SelectItem>
                                                }
                                            </Select>
                                        </Addon>
                                    </Addons>
                                    <Feedback>
                                        <ValidationSuccess>Assigned To is valid</ValidationSuccess>
                                        <ValidationError>Assigned To cannot be empty</ValidationError>
                                    </Feedback>
                                </FieldBody>
                            </Field>
                        </Validation>
                    </Column>
                    <Column ColumnSize="ColumnSize.IsFull">
                        <Field>
                            <FieldBody class="flex flex-col">
                                <Addons>
                                    <Addon AddonType="AddonType.Start">
                                        <Tooltip Text="@DescriptionTooltipText">
                                            <AddonLabel>Description</AddonLabel>
                                        </Tooltip>
                                    </Addon>
                                    <Addon AddonType="AddonType.Body">
                                        <RichTextEdit
                                            @ref="DescriptionRef"
                                            Theme="RichTextEditTheme.Snow"
                                            ContentChanged="OnDescriptionChanged"
                                            ReadOnly="@readOnly"
                                            SubmitOnEnter="false"
                                            ToolbarPosition="Placement.Top"
                                            class="@GetDescriptionClass()"
                                        >
                                            <Toolbar>
                                                <RichTextEditToolbarGroup>
                                                    <RichTextEditToolbarButton Action="RichTextEditAction.Bold" />
                                                    <RichTextEditToolbarButton Action="RichTextEditAction.Italic" />
                                                    <RichTextEditToolbarButton Action="RichTextEditAction.Underline" />
                                                    <RichTextEditToolbarSelect Action="RichTextEditAction.Size">
                                                        <RichTextEditToolbarSelectItem Value="small" />
                                                        <RichTextEditToolbarSelectItem Selected />
                                                        <RichTextEditToolbarSelectItem Value="large" />
                                                        <RichTextEditToolbarSelectItem Value="huge">
                                                            Very Big
                                                        </RichTextEditToolbarSelectItem>
                                                    </RichTextEditToolbarSelect>
                                                    <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="ordered" />
                                                    <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="bullet" />
                                                </RichTextEditToolbarGroup>
                                            </Toolbar>
                                            <Editor></Editor>
                                        </RichTextEdit>
                                    </Addon>
                                </Addons>
                                <Feedback>
                                    @if ( showDescriptionError && string.IsNullOrWhiteSpace( contentAsText ) )
                                    {
                                        <Paragraph class="mt-2 text-sm text-danger-600 dark:text-danger-500">Description cannot be empty</Paragraph>
                                    }
                                    else if ( showDescriptionError )
                                    {
                                        <Paragraph class="mt-2 text-sm text-success-600 dark:text-success-500">Description is valid</Paragraph>
                                    }
                                </Feedback>
                            </FieldBody>
                        </Field>
                    </Column>
                </Grid>
            </Fields>
        </Validations>
        <Button Color="Color.Primary" Type="ButtonType.Submit">
            Validate and Submit
        </Button>
    </Form>
</Div>

@code {
    #region Component Dependencies
        [Inject] IMessageService MessageService { get; set; }
        [Inject] IDbContextFactory<AppDbContext> DbContextFactory { get; set; }
        [Inject] Auth0Service Auth0Service { get; set; }
    #endregion

    #region Component Fields
        private Validations ValidationsRef { get; set; }
        private RichTextEdit DescriptionRef { get; set; }
        private TicketModel ticketModel { get; set; } = new TicketModel();
        private List<CompanyModel> companies = new List<CompanyModel>();
        private List<CompanyModel> ReadDataCompanies = new List<CompanyModel>();
        private CompanyModel selectedCompany = new CompanyModel
            {
                Id = Guid.Empty,
                Name = string.Empty
            };

        private List<BranchModel> branches = new List<BranchModel>();
        private List<BranchModel> ReadDataBranches = new List<BranchModel>();
        private BranchModel selectedBranch = new BranchModel
            {
                Id = Guid.Empty,
                Name = string.Empty
            };
        private List<CategoryModel> categories = new List<CategoryModel>();
        private Guid selectedCategoryId;
        private List<SubCategoryModel> subCategories = new List<SubCategoryModel>();
        private Guid selectedSubCategoryId;
        private List<StatusModel> statuses = new List<StatusModel>();
        private Guid selectedStatusId;
        private List<PriorityModel> priorities = new List<PriorityModel>();
        private Guid selectedPriorityId;
        private List<UserModel> users = new List<UserModel>();
        private UserModel assignedToUser;
        private UserModel currentUser;
        private bool readOnly;
        private string contentAsText;
        private bool showDescriptionError;
        private bool isInitialized;
        private Random random = new Random();
    #endregion

    #region Component Initialization
        protected override async Task OnInitializedAsync()
        {
            currentUser = await Auth0Service.GetUserModelAsync();
            users = await Auth0Service.GetUsersAsync();

            if (currentUser != null && !users.Any(u => u.Id == currentUser.Id))
            {
                users.Add(currentUser);
            }

            if (currentUser != null)
            {
                ticketModel.CreatedBy = currentUser;
                ticketModel.UpdatedBy = currentUser;
                ticketModel.AssignedTo = currentUser;
            }

            await LoadDataAsync();
            isInitialized = true;

            await base.OnInitializedAsync();
        }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender && isInitialized)
            {
                assignedToUser = currentUser;
                await InvokeAsync(StateHasChanged);
            }
        }
    #endregion

    #region Data Initialization
        private async Task LoadDataAsync()
        {
            await using var context = DbContextFactory.CreateDbContext();

            companies = await context.Companies.ToListAsync();
            ReadDataCompanies = companies;
            if (companies.Count > 0)
            {
                selectedCompany = companies.First();
                ticketModel.Company = selectedCompany;

                branches = await BranchModel.GetByCompanyAsync(context, selectedCompany.Id);
                ReadDataBranches = branches;
                selectedBranch = branches.FirstOrDefault();
                ticketModel.Branch = selectedBranch;
            }

            categories = await context.Categories.ToListAsync();
            selectedCategoryId = categories.FirstOrDefault()?.Id ?? Guid.Empty;
            ticketModel.Category = categories.FirstOrDefault(category => category.Id == selectedCategoryId);

            subCategories = selectedCategoryId != Guid.Empty ? await SubCategoryModel.GetByCategoryAsync(context, selectedCategoryId) : new List<SubCategoryModel>();
            selectedSubCategoryId = subCategories.FirstOrDefault()?.Id ?? Guid.Empty;
            ticketModel.SubCategory = subCategories.FirstOrDefault(subCategory => subCategory.Id == selectedSubCategoryId);

            statuses = await context.Statuses.ToListAsync();
            selectedStatusId = statuses.FirstOrDefault()?.Id ?? Guid.Empty;
            ticketModel.Status = statuses.FirstOrDefault(status => status.Id == selectedStatusId);

            priorities = await context.Priorities.ToListAsync();
            selectedPriorityId = priorities.FirstOrDefault()?.Id ?? Guid.Empty;
            ticketModel.Priority = priorities.FirstOrDefault(priority => priority.Id == selectedPriorityId);
        }
    #endregion

    #region Component Validation Methods
        void ValidateEmail(ValidatorEventArgs e)
        {
            var email = Convert.ToString(e.Value);

            e.Status = string.IsNullOrEmpty(email) ? ValidationStatus.None :
                email.Contains("@") ? ValidationStatus.Success : ValidationStatus.Error;
        }

        void ValidateCompany(ValidatorEventArgs e)
        {
            var company = e.Value as CompanyModel;

            e.Status = company == null ? ValidationStatus.Error : ValidationStatus.Success;
        }

        void ValidateBranch(ValidatorEventArgs e)
        {
            var branch = e.Value as BranchModel;

            e.Status = branch == null ? ValidationStatus.Error : ValidationStatus.Success;
        }

        void ValidateCategory(ValidatorEventArgs e)
        {
            var categoryId = (Guid)e.Value;

            e.Status = categoryId == Guid.Empty ? ValidationStatus.Error : ValidationStatus.Success;
        }

        void ValidateSubCategory(ValidatorEventArgs e)
        {
            var subCategory = e.Value as SubCategoryModel;

            e.Status = subCategory == null ? ValidationStatus.Error : ValidationStatus.Success;
        }

        void ValidateStatus(ValidatorEventArgs e)
        {
            var status = e.Value as StatusModel;

            e.Status = status == null ? ValidationStatus.Error : ValidationStatus.Success;
        }

        void ValidatePriority(ValidatorEventArgs e)
        {
            var priority = e.Value as PriorityModel;

            e.Status = priority == null ? ValidationStatus.Error : ValidationStatus.Success;
        }

        void ValidateAssignedTo(ValidatorEventArgs e)
        {
            var assignedTo = e.Value as UserModel;

            e.Status = assignedTo == null ? ValidationStatus.Error : ValidationStatus.Success;
        }

        void ValidateDescription(ValidatorEventArgs e)
        {
            var description = Convert.ToString(e.Value);

            e.Status = string.IsNullOrEmpty(description) ? ValidationStatus.Error : ValidationStatus.Success;
        }
    #endregion

    #region Component Event Handlers
        private async Task OnHandleReadDataCompanies(AutocompleteReadDataEventArgs autocompleteReadDataEventArgs)
        {
            if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
            {
                await Task.Delay(random.Next(100));
                if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
                {
                    ReadDataCompanies = companies
                        .Where(c => c.Name.StartsWith(autocompleteReadDataEventArgs.SearchValue, StringComparison.InvariantCultureIgnoreCase))
                        .ToList();
                }
            }
        }

        private async Task OnHandleCompanyChanged(CompanyModel company)
        {
            if (company != null)
            {
                selectedCompany = company;
                ticketModel.Company = selectedCompany;

                await using var context = DbContextFactory.CreateDbContext();
                branches = await BranchModel.GetByCompanyAsync(context, selectedCompany.Id);
                selectedBranch = branches.FirstOrDefault();
                ReadDataBranches = branches;
                ticketModel.Branch = selectedBranch;
                StateHasChanged();
            }
        }

        private async Task OnHandleReadDataBranches(AutocompleteReadDataEventArgs autocompleteReadDataEventArgs)
        {
            if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
            {
                await Task.Delay(random.Next(100));
                if (!autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
                {
                    ReadDataBranches = branches
                        .Where(b => b.Name.StartsWith(autocompleteReadDataEventArgs.SearchValue, StringComparison.InvariantCultureIgnoreCase))
                        .ToList();
                }
            }
        }

        private async Task OnHandleBranchChanged(BranchModel branch)
        {
            selectedBranch = branch;
            ticketModel.Branch = branches.Find(b => b.Id == selectedBranch.Id);
            StateHasChanged();
        }

        private async Task OnCategoryChanged(Guid categoryId)
        {

            selectedCategoryId = categoryId;
            if (selectedCategoryId != Guid.Empty)
            {
                await using var context = DbContextFactory.CreateDbContext();
                subCategories = await SubCategoryModel.GetByCategoryAsync(context, selectedCategoryId);
                selectedSubCategoryId = subCategories.FirstOrDefault()?.Id ?? Guid.Empty;
            }
            else
            {
                subCategories = new List<SubCategoryModel>();
                selectedSubCategoryId = Guid.Empty;
            }

            ticketModel.Category = categories.Find(c => c.Id == selectedCategoryId);
            ticketModel.SubCategory = subCategories.Find(sc => sc.Id == selectedSubCategoryId);
            StateHasChanged();
        }

        private async Task OnDescriptionChanged()
        {
            contentAsText = await DescriptionRef.GetTextAsync();
            ticketModel.Description = await DescriptionRef.GetHtmlAsync();
        }

        private async Task OnSaveClicked()
        {
            showDescriptionError = true;

            if (await ValidationsRef.ValidateAll() && !string.IsNullOrWhiteSpace(contentAsText))
            {
                await MessageService.Info("Thank you for filling the form.");

                await ValidationsRef.ClearAll();
                showDescriptionError = false;
            }
            else if (string.IsNullOrWhiteSpace(contentAsText))
            {
                await MessageService.Error("Description cannot be empty.");
            }
        }
    #endregion

    #region Component Utility Methods
        private string GetDescriptionClass()
        {
            string baseClasses = "bg-gray-50 border border-gray-300 text-gray-900 rounded-r-lg focus:ring-primary-500 focus:border-primary-500 block w-full dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 disabled:cursor-not-allowed disabled:opacity-75 p-2.5 text-sm text-white";
            string errorClasses = "border border-red-500 text-red-900 placeholder-red-700 focus:ring-red-500 dark:text-red-500 dark:placeholder-red-500 dark:border-red-500";

            return showDescriptionError && string.IsNullOrWhiteSpace(contentAsText) ? $"{baseClasses} {errorClasses}" : baseClasses;
        }
    #endregion

    #region Component Tooltips
        private string ContactTooltipText = "The name of the caller";
        private string PhoneTooltipText = "The phone number of the caller";
        private string EmailTooltipText = "The email address of the caller";
        private string CompanyTooltipText = "The company of the caller";
        private string BranchTooltipText = "The branch of the caller";
        private string CategoryTooltipText = "The category of the ticket";
        private string SubCategoryTooltipText = "The subcategory of the ticket";
        private string StatusTooltipText = "The status of the ticket";
        private string PriorityTooltipText = "The priority of the ticket";
        private string AssignedToTooltipText = "The person assigned to this ticket";
        private string DescriptionTooltipText = "The description of the issue";
    #endregion
}